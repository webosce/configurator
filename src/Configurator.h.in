// Copyright (c) 2009-2022 LG Electronics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

#ifndef CONFIGURATOR_H_
#define CONFIGURATOR_H_

#include "core/MojServiceRequest.h"
#include "core/MojSignal.h"
#include "CoreDefs.h"
#include <tr1/unordered_map>
#include <string>
#include <vector>

#include "md5sum.h"

class ConfiguratorCallback;

static const MojModeT kCacheDirPerms = S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH;
static const MojModeT kCacheStampPerm = S_IRWXU | S_IRGRP | S_IROTH;

static const char* kCacheDir = "@WEBOS_INSTALL_LOCALSTATEDIR@/cache/";
static const char* kConfCacheDir = "@WEBOS_INSTALL_LOCALSTATEDIR@/cache/configurator/";

class Configurator : public MojSignalHandler
{
public:
	typedef MojSignal<const std::string &, MojObject&, MojErr>::Slot<Configurator> ConfiguredResponse;
	typedef MojServiceRequest::ReplySignal::Slot<Configurator> GenericResponse;
	typedef std::vector<std::string> ConfigCollection;

	enum RunType {
		Configure,
		Reconfigure,
		RemoveConfiguration,
	};

	enum ConfigType {
		ConfigUnknown,
		ConfigApplication,
		ConfigService,
	};

	Configurator(const std::string& id, ConfigType confType, RunType type, BusClient& busClient, const std::string& configDirectory);
	virtual ~Configurator();

	static void ResetConfigStats();
	static const ConfigCollection& ConfigureOk();
	static const ConfigCollection& ConfigureFailure();

	bool Run();
	virtual const char* ConfiguratorName() const = 0;
	virtual const char* ServiceName() const = 0;

protected:
	virtual ConfiguratorCallback* CreateCallback(const std::string &filePath);

	virtual MojErr ProcessConfig(const std::string& filePath, const std::string& json);
	virtual MojErr ProcessConfigRemoval(const std::string& filePath, const std::string& json);

	virtual	MojErr ProcessConfig(const std::string& filePath, MojObject& json) = 0;
	virtual MojErr ProcessConfigRemoval(const std::string &filePath, MojObject& json) = 0;

	void              MarkConfigured(const std::string& confFile) const;
	void              UnmarkConfigured(const std::string& confFile) const;
	virtual bool CanCacheConfiguratorStatus(const std::string& confFile) const;

	const std::string& ParentId(const std::string& filePath) const;

	BusClient& m_busClient;
	const std::string m_id;
	const ConfigType m_confType;

private:
	typedef std::tr1::unordered_map<std::string, std::string> ConfigMap;
	void              InitCacheDir() const;
	bool              IsAlreadyConfigured(const std::string &confFile) const;
	bool              GetConfigFiles(const std::string& parent, const std::string& directory);
	const std::string ReadFile(const std::string& filePath) const;
	bool              WriteFile(const std::string path, const std::string contents)const;
	bool              GenerateandVerifyConfigChecksum(const std::string& path,  std::string cachepath)const;
	void              Complete();
	MojErr            BusResponseAsync(const std::string& filePath, MojObject& response, MojErr err, bool *cacheConfigured);

	/**
	 * Key = /full/path/to/config/file
	 * Value = "config" (the parent directory containing the config file)
	 */
	ConfigMap m_parentDirMap;

	ConfigCollection m_configs;
	ConfigCollection m_pendingConfigs;
	const RunType m_currentType;
	bool m_completed;
	const std::string m_configDir;
	bool m_emptyConfigurator;
	bool m_scanned;

	static ConfigCollection m_configureOk;
	static ConfigCollection m_configureFailed;

	friend class ConfiguratorCallback;
};

class ConfiguratorCallback : public MojSignalHandler
{
public:
	typedef MojServiceRequest::ReplySignal::Slot<ConfiguratorCallback> GenericResponse;

	ConfiguratorCallback(Configurator* configurator, const std::string& filePath);
	virtual ~ConfiguratorCallback();

	GenericResponse m_slot;

protected:
	// configuration-specific handler
	virtual MojErr Response(MojObject& response, MojErr err) = 0;

	// this is called at most once - either call within response or called
	// by ResponseWrapper if Response return MojErrNone
	MojErr DelegateResponse(MojObject& response, MojErr err);

	// useful if you want to mark this config file as processed even
	// though it returned an error (e.g. if the service responds with a specific
	// error if it was already present i.e. activitymanager & filecache)
	// this maintains default behaviour if there was no error.
	void MarkConfigured();

	// useful if you want to specifically mark a config file as unconfigured
	// this maintains default behaviour if there was no error
	void UnmarkConfigured();

	// the path to the configuration that generated this configurator request
	const std::string m_config;

private:
	typedef MojRefCountedPtr<Configurator> ConfiguratorPtr;

	ConfiguratorPtr m_handler;
	bool m_delegateInvoked;

	bool m_defaultCacheBehaviourUsed;
	// only one of these 2 should be set if any
	bool m_unconfigure;
	bool m_configure;

	MojErr ResponseWrapper(MojObject &response, MojErr err);
};

class DefaultConfiguratorCallback : public ConfiguratorCallback
{
public:
	DefaultConfiguratorCallback(Configurator *configurator, const std::string& filePath);
	~DefaultConfiguratorCallback();

protected:
	MojErr Response(MojObject &response, MojErr err);
};

#endif /* CONFIGURATOR_H_ */
